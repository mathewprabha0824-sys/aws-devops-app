---
- name: Configure Application Server
  hosts: app_servers
  become: yes
  vars:
    app_port: 8080
    app_user: appuser
    app_dir: /opt/application
    
  tasks:
    - name: Update all packages
      yum:
        name: '*'
        state: latest
        update_cache: yes
      tags: update

    - name: Install required packages
      yum:
        name:
          - java-11-openjdk
          - java-11-openjdk-devel
          - python3
          - python3-pip
          - mysql
          - git
          - wget
          - curl
        state: present
      tags: install

    - name: Create application user
      user:
        name: "{{ app_user }}"
        system: yes
        shell: /bin/bash
        home: "{{ app_dir }}"
        create_home: yes
      tags: setup

    - name: Create application directory structure
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'
      loop:
        - "{{ app_dir }}"
        - "{{ app_dir }}/logs"
        - "{{ app_dir }}/config"
        - "{{ app_dir }}/bin"
      tags: setup

    - name: Deploy sample Spring Boot application JAR
      copy:
        dest: "{{ app_dir }}/bin/app.py"
        content: |
          #!/usr/bin/env python3
          from http.server import HTTPServer, BaseHTTPRequestHandler
          import json
          import socket
          
          class AppHandler(BaseHTTPRequestHandler):
              def do_GET(self):
                  if self.path == '/health':
                      self.send_response(200)
                      self.send_header('Content-type', 'application/json')
                      self.end_headers()
                      response = {
                          'status': 'healthy',
                          'hostname': socket.gethostname(),
                          'service': 'application-server'
                      }
                      self.wfile.write(json.dumps(response).encode())
                  elif self.path == '/api/info':
                      self.send_response(200)
                      self.send_header('Content-type', 'application/json')
                      self.end_headers()
                      response = {
                          'application': 'DevOps Assessment App',
                          'version': '1.0.0',
                          'hostname': socket.gethostname()
                      }
                      self.wfile.write(json.dumps(response).encode())
                  else:
                      self.send_response(200)
                      self.send_header('Content-type', 'text/plain')
                      self.end_headers()
                      self.wfile.write(b'Application Server Running')
              
              def log_message(self, format, *args):
                  pass
          
          if __name__ == '__main__':
              server = HTTPServer(('0.0.0.0', 8080), AppHandler)
              print('Application server running on port 8080')
              server.serve_forever()
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'
      tags: deploy

    - name: Create systemd service for application
      copy:
        dest: /etc/systemd/system/app-server.service
        content: |
          [Unit]
          Description=Application Server
          After=network.target
          
          [Service]
          Type=simple
          User={{ app_user }}
          WorkingDirectory={{ app_dir }}/bin
          ExecStart={{ app_dir }}/bin/app.py
          Restart=always
          RestartSec=10
          StandardOutput=append:{{ app_dir }}/logs/app.log
          StandardError=append:{{ app_dir }}/logs/error.log
          
          [Install]
          WantedBy=multi-user.target
        mode: '0644'
      tags: service
      notify: reload systemd

    - name: Start and enable application service
      systemd:
        name: app-server
        state: started
        enabled: yes
        daemon_reload: yes
      tags: service

    - name: Security hardening - Configure SELinux for application port
      seport:
        ports: "{{ app_port }}"
        proto: tcp
        setype: http_port_t
        state: present
      ignore_errors: yes
      tags: security

    - name: Security hardening - Disable unnecessary services
      systemd:
        name: "{{ item }}"
        state: stopped
        enabled: no
      loop:
        - postfix
      ignore_errors: yes
      tags: security

    - name: Install CloudWatch agent
      yum:
        name: amazon-cloudwatch-agent
        state: present
      tags: monitoring

    - name: Create CloudWatch config
      copy:
        dest: /opt/aws/amazon-cloudwatch-agent/etc/config.json
        content: |
          {
            "metrics": {
              "namespace": "DevOpsAssessment/AppServer",
              "metrics_collected": {
                "cpu": {
                  "measurement": [
                    {"name": "cpu_usage_idle", "rename": "CPU_IDLE", "unit": "Percent"},
                    {"name": "cpu_usage_iowait", "rename": "CPU_IOWAIT", "unit": "Percent"}
                  ],
                  "totalcpu": false
                },
                "disk": {
                  "measurement": [
                    {"name": "used_percent", "rename": "DISK_USED", "unit": "Percent"}
                  ],
                  "resources": ["*"]
                },
                "mem": {
                  "measurement": [
                    {"name": "mem_used_percent", "rename": "MEM_USED", "unit": "Percent"}
                  ]
                }
              }
            },
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "{{ app_dir }}/logs/app.log",
                      "log_group_name": "/aws/devops/app-server",
                      "log_stream_name": "{instance_id}/application"
                    }
                  ]
                }
              }
            }
          }
      tags: monitoring

  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes